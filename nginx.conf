worker_processes 1;

events {
    worker_connections 1024;
}

http {
    log_format sonarqube_redirect '$remote_addr - $remote_user [$time_local] "$request" '
                                  '$status $body_bytes_sent "$http_referer" '
                                  '"$http_user_agent" "$request_uri"';

    server {
        listen 80;
        server_name localhost;

        # Redirect and strip /sonarqube from the URL before forwarding
        location /sonarqube/ {
            access_log /var/log/nginx/sonarqube_redirect.log sonarqube_redirect;

            # Rewrite the URL to strip the /sonarqube prefix
            rewrite ^/sonarqube/(.*)$ /$1 break;

            # Forward traffic to the EKS SonarQube server
            proxy_pass http://YOUR_EKS_SERVER_IP_OR_URL;

            # Forward headers for proper request handling
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Ensure request headers are forwarded (e.g., Authorization)
            proxy_pass_request_headers on;
        }

        # Health check endpoint
        location = /sonarqube/health {
            access_log off;
            default_type application/json;
            return 200 '{"status":"UP"}';
        }
    }
}
